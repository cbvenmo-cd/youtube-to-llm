// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model VideoAnalysis {
  id          Int      @id @default(autoincrement())
  url         String   
  videoId     String   @unique
  title       String
  channel     String
  metadata    Json     // YouTube API response
  createdAt   DateTime @default(now())
  transcript  Transcript?
  tags        VideoTag[]
  
  @@index([createdAt])
}

model Transcript {
  id              Int           @id @default(autoincrement())
  videoAnalysisId Int           @unique
  videoAnalysis   VideoAnalysis @relation(fields: [videoAnalysisId], references: [id], onDelete: Cascade)
  content         String        @db.Text
  language        String?
  createdAt       DateTime      @default(now())
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String?  // Optional hex color for UI
  createdAt DateTime @default(now())
  videos    VideoTag[]
}

model VideoTag {
  id              Int           @id @default(autoincrement())
  videoAnalysisId Int
  tagId           Int
  videoAnalysis   VideoAnalysis @relation(fields: [videoAnalysisId], references: [id], onDelete: Cascade)
  tag             Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  
  @@unique([videoAnalysisId, tagId])
  @@index([videoAnalysisId])
  @@index([tagId])
}
